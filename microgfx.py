#!/usr/bin/env python

ENGINE_SSD1306 = 1
ENGINE_PYGAME = 2

X = 0
Y = 1

font8x8 = [
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00],
    [ 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00],
    [ 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00],
    [ 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00],
    [ 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00],
    [ 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00],
    [ 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00],
    [ 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00],
    [ 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06],
    [ 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00],
    [ 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00],
    [ 0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00],
    [ 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00],
    [ 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00],
    [ 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00],
    [ 0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00],
    [ 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00],
    [ 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00],
    [ 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00],
    [ 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00],
    [ 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00],
    [ 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00],
    [ 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06],
    [ 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00],
    [ 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00],
    [ 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00],
    [ 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00],
    [ 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00],
    [ 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00],
    [ 0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00],
    [ 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00],
    [ 0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00],
    [ 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00],
    [ 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00],
    [ 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00],
    [ 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00],
    [ 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
    [ 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00],
    [ 0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00],
    [ 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00],
    [ 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00],
    [ 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00],
    [ 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00],
    [ 0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00],
    [ 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00],
    [ 0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00],
    [ 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00],
    [ 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
    [ 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00],
    [ 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00],
    [ 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00],
    [ 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00],
    [ 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00],
    [ 0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00],
    [ 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00],
    [ 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00],
    [ 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00],
    [ 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF],
    [ 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00],
    [ 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00],
    [ 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00],
    [ 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00],
    [ 0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00],
    [ 0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00],
    [ 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F],
    [ 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00],
    [ 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
    [ 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E],
    [ 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00],
    [ 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
    [ 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00],
    [ 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00],
    [ 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00],
    [ 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F],
    [ 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78],
    [ 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00],
    [ 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00],
    [ 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00],
    [ 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00],
    [ 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00],
    [ 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00],
    [ 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00],
    [ 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F],
    [ 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00],
    [ 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00],
    [ 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00],
    [ 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00],
    [ 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00] 
]

engine = None

import math
try:
   import ssd1306
   engine = ENGINE_SSD1306
except:
   import pygame
   engine = ENGINE_PYGAME

class Input( object ):

   EVENT_NONE = 0
   EVENT_QUIT = 1
   EVENT_RLEFT = 2
   EVENT_RRIGHT = 3
   EVENT_FWD = 4

   def __init__( self ):
      pass

   def poll( self ):
      if ENGINE_PYGAME == engine:
         for event in pygame.event.get():
            if pygame.QUIT == event.type:
               return Input.EVENT_QUIT
            elif pygame.KEYDOWN == event.type:
               if pygame.K_ESCAPE == event.key:
                  return Input.EVENT_QUIT

         keys = pygame.key.get_pressed()
         if keys[pygame.K_RIGHT]:
            return Input.EVENT_RRIGHT
         if keys[pygame.K_LEFT]:
            return Input.EVENT_RLEFT
         if keys[pygame.K_UP]:
            return Input.EVENT_FWD

class Gfx( object ):

   PATTERN_FILLED = 0
   PATTERN_HASH = 1
   PATTERN_STRIPES_HORIZ = 2
   PATTERN_STRIPES_DIAG_1 = 3

   def __init__( self, screen_sz, zoom=1 ):

      self.pos = (float( 6 ), float( 3 ))
      self.facing = (float( -1 ), float( 0 ))
      self.plane = (float( 0 ), float( 0.66 ))
      self.zoom = zoom
      self.diag_stripe_offset = 0
      self.diag_last_x = 0

      if ENGINE_PYGAME == engine:
         pygame.init()
         self.screen = pygame.display.set_mode( \
            (screen_sz[X] * self.zoom, screen_sz[Y] * self.zoom) )
         self.clock = pygame.time.Clock()

   def wait( self, fps ):
      if ENGINE_PYGAME == engine:
         self.clock.tick( fps )

   def blank( self, color ):
      if ENGINE_PYGAME == engine:
         pygame.draw.rect( self.screen, color, [0, 0,
            self.screen.get_width() * self.zoom, 
            self.screen.get_height() * self.zoom] )

   def text( self, text, color, x, y, bg=None ):
      char_offset = 0
      for char in text:
         char_bits = font8x8[ord( char )]
         row_offset = 0
         for row in char_bits:
            pix_offset = 0
            for p in xrange( 8 ):
               if 1 == 1 & (row >> pix_offset): 
                  self.pixel( color, \
                     (x + pix_offset + (char_offset * 9)), \
                     (y + row_offset) )
               elif bg:
                  self.pixel( bg, \
                     (x + pix_offset + (char_offset * 9)), \
                     (y + row_offset) )
               pix_offset += 1
            row_offset += 1
         char_offset += 1

   def pixel( self, color, x, y ):
      pygame.draw.rect( self.screen, color, \
         [x * self.zoom, y * self.zoom, self.zoom, self.zoom] )

   def line( self, color, x, y1, y2, pattern ):

      if Gfx.PATTERN_STRIPES_HORIZ == pattern:
         for y_dot in range( y1, y2 ):
            if 0 < y_dot % 2:
               self.pixel( (0, 0, 0), x, y_dot )
            else:
               self.pixel( color, x, y_dot )

      elif Gfx.PATTERN_HASH == pattern:
         for y_dot in range( y1, y2 ):
            if 0 < y_dot % 2 and 0 < x % 2 \
            or 0 == y_dot % 2 and 0 == x % 2:
               self.pixel( (0, 0, 0), x, y_dot )
            else:
               self.pixel( color, x, y_dot )

      elif Gfx.PATTERN_STRIPES_DIAG_1 == pattern:
         for y_dot in range( y1, y2 ):
            if 0 != ((self.diag_stripe_offset + y_dot) % 3):
               self.pixel( (0, 0, 0), x, y_dot )
            else:
               self.pixel( color, x, y_dot )

         if x == self.diag_last_x + 1:
            self.diag_stripe_offset += 1
         else:
            self.diag_stripe_offset = 0

         self.diag_last_x = x

      else:
         height = (y2 - y1) * self.zoom
         if ENGINE_PYGAME == engine:
            pygame.draw.rect( self.screen, color, \
               [x * self.zoom, y1 * self.zoom, self.zoom, height] )

   def rotate( self, speed ):

      # Speed -1 for right, +1 for left.

      # Rotate the camera.
      new_facing = \
         (self.facing[X] * math.cos( speed ) - \
            self.facing[Y] * math.sin( speed ), \
         self.facing[X] * math.sin( speed ) + \
            self.facing[Y] * math.cos( speed ))

      # Rotate the map.
      new_plane = \
         (self.plane[X] * math.cos( speed ) - \
            self.plane[Y] * math.sin( speed ),
         self.plane[X] * math.sin( speed ) + \
            self.plane[Y] * math.cos( speed ))

      self.facing = new_facing
      self.plane = new_plane

   def flip( self ):
      if ENGINE_PYGAME == engine:
         pygame.display.flip()

